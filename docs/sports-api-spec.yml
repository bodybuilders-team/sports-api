openapi: 3.0.1
info:
  title: Sports API
  description: 'API for an application that manages sports'
  termsOfService: https://swagger.io/terms/
  version: 1.0.0

servers:
  - url: https://isel-ls-2122-2-leic41d-g03.herokuapp.com/api
  - url: http://localhost:8888/api

tags:
  - name: Users

  - name: Routes

  - name: Sports

  - name: Activities

paths:

  /users:
    post:
      tags:
        - Users
      summary: Creates a new user
      requestBody:
        description: User object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        201:
          description: User was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        400:
          $ref: '#/components/responses/InvalidRequestBodyResponse'
        409:
          description: User with the same email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

    get:
      tags:
        - Users
      summary: Gets all users
      parameters:
        - name: skip
          in: query
          description: Number of entities to skip
          required: false
          schema:
            type: integer
            default: 0

        - name: limit
          in: query
          description: Number of entities that are returned
          required: false
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Users were found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'


  /users/login:
    post:
      tags:
        - Users
      summary: Logs a user in, by providing a token in exchange for a valid email and password
      requestBody:
        description: User credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserRequest'
      responses:
        200:
          description: User was logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginUserResponse'
        400:
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: No user with that email exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Gets a user by id
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: User was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid user id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: User was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /users/{id}/activities:
    get:
      tags:
        - Users
      summary: Gets all activities made by a user
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: integer

        - name: skip
          in: query
          description: Number of entities to skip
          required: false
          schema:
            type: integer
            default: 0

        - name: limit
          in: query
          description: Number of entities that are returned
          required: false
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Activities were found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivitiesResponse'
        400:
          description: Invalid user id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /routes:
    post:
      tags:
        - Routes
      summary: Creates a new route
      security:
        - token: [ ]
      requestBody:
        description: Route object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRouteRequest'
      responses:
        201:
          description: Route was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRouteResponse'
        400:
          description: Invalid Request Body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'
    get:
      tags:
        - Routes
      parameters:
        - name: startLocation
          in: query
          description: Route start location
          required: false
          schema:
            type: string

        - name: endLocation
          in: query
          description: Route end location
          required: false
          schema:
            type: string

        - name: skip
          in: query
          description: Number of entities to skip
          required: false
          schema:
            type: integer
            default: 0

        - name: limit
          in: query
          description: Number of entities that are returned
          required: false
          schema:
            type: integer
            default: 10
      summary: Searches for routes
      responses:
        200:
          description: Routes were found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutesResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'


  /routes/{id}:
    get:
      tags:
        - Routes
      summary: Gets a route by id
      parameters:
        - name: id
          in: path
          description: Route id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Route was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        400:
          description: Invalid route id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Route was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

    patch:
      tags:
        - Routes
      summary: Updates a route by id
      parameters:
        - name: id
          in: path
          description: Route id
          required: true
          schema:
            type: integer

      requestBody:
        description: New route information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRouteRequest'
      responses:
        200:
          description: Route was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRouteResponse'
        400:
          description: Invalid route id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Route was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /sports:
    post:
      tags:
        - Sports
      summary: Creates a new sport
      security:
        - token: [ ]
      requestBody:
        description: Sport object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSportRequest'
      responses:
        201:
          description: Sport was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSportResponse'
        400:
          $ref: '#/components/responses/InvalidRequestBodyResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

    get:
      tags:
        - Sports
      summary: Searches for sports
      parameters:
        - name: name
          in: query
          description: Sport name
          required: false
          schema:
            type: string

        - name: skip
          in: query
          description: Number of entities to skip
          required: false
          schema:
            type: integer
            default: 0

        - name: limit
          in: query
          description: Number of entities that are returned
          required: false
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Sports were found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SportsResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /sports/{id}:
    get:
      tags:
        - Sports
      summary: Gets a sport by id
      parameters:
        - name: id
          in: path
          description: Sport id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Sport was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sport'
        400:
          description: Invalid sport id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Sport was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

    patch:
      tags:
        - Sports
      summary: Updates a sport by id
      parameters:
        - name: id
          in: path
          description: Sport id
          required: true
          schema:
            type: integer
      requestBody:
        description: New sport information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSportRequest'
      responses:
        200:
          description: Sport was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSportResponse'
        400:
          description: Invalid sport id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Sport was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /sports/{id}/activities:
    get:
      tags:
        - Sports
      summary: Gets all activities of a sport
      parameters:
        - name: id
          in: path
          description: Sport id
          required: true
          schema:
            type: integer
        - name: skip
          in: query
          description: Number of entities to skip
          required: false
          schema:
            type: integer
            default: 0

        - name: limit
          in: query
          description: Number of entities that are returned
          required: false
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Activity was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivitiesResponse'
        400:
          description: Invalid sport id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Activity was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'


  /activities:
    post:
      tags:
        - Activities
      summary: Creates a new activity for the sport identified by a sport id
      security:
        - token: [ ]
      requestBody:
        description: Activity object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateActivityRequest'
      responses:
        201:
          description: Activity was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateActivityResponse'
        400:
          $ref: '#/components/responses/InvalidRequestBodyResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

    delete:
      tags:
        - Activities
      summary: Deletes activities
      security:
        - token: [ ]
      requestBody:
        description: Activities to delete
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteActivitiesRequest'
      responses:
        200:
          description: Activities deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        400:
          description: Invalid activity ids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

    get:
      tags:
        - Activities
      summary: Searches for activities
      parameters:
        - name: sid
          in: query
          description: Sport Id
          required: true
          schema:
            type: integer

        - name: orderBy
          in: query
          description: Order by
          required: true
          schema:
            type: string

        - name: date
          in: query
          description: Activity date
          required: false
          schema:
            type: string

        - name: rid
          in: query
          description: Route id
          required: false
          schema:
            type: integer

        - name: skip
          in: query
          description: Number of entities to skip
          required: false
          schema:
            type: integer
            default: 0

        - name: limit
          in: query
          description: Number of entities that are returned
          required: false
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Activity was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivitiesResponse'
        400:
          description: Invalid query params
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Activity was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /activities/users:
    get:
      tags:
        - Activities
      summary: Searches for all users that have an activity with a specified sport id and route id
      parameters:
        - name: sid
          in: query
          description: Sport Id
          required: true
          schema:
            type: integer

        - name: rid
          in: query
          description: Route id
          required: true
          schema:
            type: integer

        - name: skip
          in: query
          description: Number of entities to skip
          required: false
          schema:
            type: integer
            default: 0

        - name: limit
          in: query
          description: Number of entities that are returned
          required: false
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Users were found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        400:
          description: Invalid query params
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /activities/{id}:
    get:
      tags:
        - Activities
      summary: Gets an activity by id
      parameters:
        - name: id
          in: path
          description: Activity id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Activity was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        400:
          description: Invalid activity id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Activity was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

    delete:
      tags:
        - Activities
      summary: Deletes an activity by id
      security:
        - token: [ ]
      parameters:
        - name: id
          in: path
          description: Activity id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Activity deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        400:
          description: Invalid activity id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Activity was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

    patch:
      tags:
        - Activities
      summary: Updates an activity by id
      parameters:
        - name: id
          in: path
          description: Activity id
          required: true
          schema:
            type: integer
      requestBody:
        description: New activity information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateActivityRequest'
      responses:
        200:
          description: Activity was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateActivityResponse'
        400:
          description: Invalid activity id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Activity was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'


components:
  responses:
    InternalServerErrorResponse:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            description: Internal server error
            required:
              - name
              - description
            properties:
              name:
                type: string
                description: Error name
                example: INTERNAL_ERROR
              description:
                type: string
                description: Error description message
                example: An internal error occurred

    InvalidRequestBodyResponse:
      description: Invalid request body
      content:
        application/json:
          schema:
            type: object
            description: Invalid request body error
            required:
              - name
              - description
            properties:
              name:
                type: string
                description: Error name
                example: BAD_REQUEST
              description:
                type: string
                description: Error description message
                example: The request body is not valid
              extraInfo:
                type: string
                description: Extra error info
                example: Route id must be positive

  schemas:
    UsersResponse:
      type: object
      required:
        - users
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        totalCount:
          type: integer
          example: 10

    RoutesResponse:
      type: object
      required:
        - routes
      properties:
        routes:
          type: array
          items:
            $ref: '#/components/schemas/Route'
        totalCount:
          type: integer
          example: 10

    SportsResponse:
      type: object
      required:
        - sports
      properties:
        sports:
          type: array
          items:
            $ref: '#/components/schemas/Sport'
        totalCount:
          type: integer
          example: 10

    ActivitiesResponse:
      type: object
      required:
        - activities
      properties:
        activities:
          type: array
          items:
            $ref: '#/components/schemas/Activity'
        totalCount:
          type: integer
          example: 10

    DeleteActivitiesRequest:
      type: object
      required:
        - activityIds
      properties:
        activityIds:
          type: array
          items:
            type: integer
            description: Activity Id
            example: 1

    CreateRouteRequest:
      type: object
      required:
        - startLocation
        - endLocation
        - distance
      properties:
        startLocation:
          type: string
          description: Route start location
          example: "Lisbon"
        endLocation:
          type: string
          description: Route end location
          example: "Lisbon"
        distance:
          type: number
          description: Route distance in km
          example: 15.2

    CreateRouteResponse:
      type: object
      required:
        - rid
      properties:
        rid:
          type: integer
          description: Route Id
          example: 1

    CreateActivityRequest:
      required:
        - date
        - duration
        - sid
      properties:
        date:
          $ref: '#/components/schemas/Date'
        duration:
          $ref: '#/components/schemas/Duration'
        sid:
          type: integer
          description: Sport id
          example: 1
        rid:
          type: integer
          description: Route id
          example: 1

    CreateActivityResponse:
      type: object
      required:
        - aid
      properties:
        aid:
          type: integer
          description: Activity Id
          example: 1

    CreateUserRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          description: User name
          example: André Páscoa
        email:
          type: string
          description: User email
          example: andre@pascoa.org
        password:
          type: string
          description: User password
          example: LittleHomie123

    CreateUserResponse:
      type: object
      required:
        - uid
      properties:
        uid:
          type: integer
          description: User Id
          example: 1

    CreateSportRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Sport name
          example: Powerlifting

        description:
          type: string
          description: Sport Description
          example: Get big

    CreateSportResponse:
      type: object
      required:
        - sid
      properties:
        sid:
          type: integer
          description: Sport Id
          example: 1

    UpdateSportRequest:
      type: object
      properties:
        name:
          type: string
          description: New sport name
          example: Powerlifting
        description:
          type: string
          description: New sport description
          example: Get big

    UpdateSportResponse:
      type: object
      required:
        - modified
      properties:
        modified:
          type: boolean
          description: True if the sport was modified

    UpdateActivityRequest:
      type: object
      properties:
        date:
          $ref: '#/components/schemas/Date'
        duration:
          $ref: '#/components/schemas/Duration'
        sid:
          type: integer
          description: New sport id of the activity
          example: 1
        rid:
          type: integer
          description: New route id of the activity
          example: 1

    UpdateActivityResponse:
      type: object
      required:
        - modified
      properties:
        modified:
          type: boolean
          description: True if the activity was modified

    UpdateRouteRequest:
      type: object
      properties:
        startLocation:
          type: string
          description: New route start location
          example: "Lisbon"
        endLocation:
          type: string
          description: New route end location
          example: "Lisbon"
        distance:
          type: number
          description: New route distance
          example: 15.2

    UpdateRouteResponse:
      type: object
      required:
        - modified
      properties:
        modified:
          type: boolean
          description: True if the route was modified

    LoginUserRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: User email
          example: andre@pascoa.org
        password:
          type: string
          description: User password
          example: "LittleHomie123"

    LoginUserResponse:
      type: object
      required:
        - token
        - uid
      properties:
        token:
          type: string
          description: User token
          example: 663f6889-e7b8-4eb4-8698-38d72de4a956
        uid:
          type: integer
          description: User id
          example: 1

    MessageResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Response message

    AppError:
      type: object
      description: Application error
      required:
        - name
        - description
      properties:
        name:
          type: string
          description: Error name
          example: FAIL
        description:
          type: string
          description: Error description message
          example: An error occurred
        extraInfo:
          type: string
          description: Extra error info
          example: "User not found"

    User:
      type: object
      description: User object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: integer
          description: User Id
          example: 1
        name:
          type: string
          description: User name
          example: André Páscoa
        email:
          type: string
          description: User email
          example: andre@pascoa.org

    Sport:
      type: object
      description: Sport object
      required:
        - id
        - name
        - uid
      properties:
        id:
          type: integer
          description: Sport id
          example: 1
        name:
          type: string
          description: Sport name
          example: Powerlifting
        description:
          type: string
          description: Sport Description
          example: Get big
        uid:
          type: integer
          description: User id
          example: 1

    Route:
      type: object
      description: Route object
      required:
        - id
        - startLocation
        - endLocation
        - distance
        - uid
      properties:
        id:
          type: integer
          description: Route id
          example: 1
        startLocation:
          type: string
          description: Route start location
          example: "Porto, Portugal"
        endLocation:
          type: string
          description: Route end location
          example: "Lisbon, Portugal"
        distance:
          type: number
          description: Route distance in km
          example: 15.2
        uid:
          type: integer
          description: User id
          example: 1

    Activity:
      type: object
      description: Activity object
      required:
        - id
        - date
        - duration
        - uid
        - sid
      properties:
        id:
          type: integer
          description: Activity id
          example: 1
        date:
          $ref: '#/components/schemas/Date'
        duration:
          $ref: '#/components/schemas/Duration'
        uid:
          type: integer
          description: User id
          example: 1
        sid:
          type: integer
          description: Sport id
          example: 1
        rid:
          type: integer
          description: Route id
          example: 1

    Duration:
      type: string
      description: Duration (HH:MM:SS.FFF)
      pattern: ^(?:[01]\d|2[0123])\:(?:[012345]\d)\:(?:[012345]\d)\.\d{3}$
      example: "01:23:45.678"

    Date:
      type: string
      description: Date (YYYY-MM-DD)
      pattern: ^\d{4}\-(0[1-9]|1[012])\-(0[1-9]|[12][0-9]|3[01])$
      example: "2001-09-26"

  securitySchemes:
    token:
      type: http
      scheme: bearer
