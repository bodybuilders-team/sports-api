openapi: 3.0.1
info:
  title: Sports API
  description: 'API for an application that manages sports'
  termsOfService: https://swagger.io/terms/
  version: 1.0.0

servers:
  - url: http://localhost:8888


tags:
  - name: Users

  - name: Routes

  - name: Sports

  - name: Activities

paths:

  /users:
    post:
      tags:
        - Users
      summary: Creates a new user
      requestBody:
        description: User object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'

      responses:
        201:
          description: User was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        400:
          description: User with the same email already exists or invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

    get:
      tags:
        - Users
      summary: Gets all users
      responses:
        200:
          description: Users were found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Gets a user by id
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string
      responses:
        200:
          description: User was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid user id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: User was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

  /users/{id}/activities:
    get:
      tags:
        - Users
      summary: Gets all activities made by a user
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string

      responses:
        200:
          description: Activities were found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivitiesResponse'
        400:
          description: Invalid user id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /routes:
    post:
      tags:
        - Routes
      summary: Creates a new route
      security:
        - token: [ ]
      requestBody:
        description: Route object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRouteRequest'
      responses:
        201:
          description: Route was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRouteResponse'
        400:
          description: Route with the same name already exists or invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'
    get:
      tags:
        - Routes
      summary: Gets all routes
      responses:
        200:
          description: Routes were found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutesResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'


  /routes/{id}:
    get:
      tags:
        - Routes
      summary: Gets a route by id
      parameters:
        - name: id
          in: path
          description: Route id
          required: true
          schema:
            type: string
      responses:

        200:
          description: Route was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'

        400:
          description: Invalid route id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

        404:
          description: Route was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /sports:
    post:
      tags:
        - Sports
      summary: Creates a new sport
      security:
        - token: [ ]
      requestBody:
        description: Sport object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSportRequest'
      responses:
        201:
          description: Sport was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSportResponse'

        400:
          $ref: '#/components/responses/InvalidRequestBodyResponse'

        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

    get:
      tags:
        - Sports
      summary: Gets all sports
      responses:
        200:
          description: Sports were found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SportsResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /sports/{id}:
    get:
      tags:
        - Sports
      summary: Gets a sport by id
      parameters:
        - name: id
          in: path
          description: Sport id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Sport was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sport'
        400:
          description: Invalid sport id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Sport was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /activities:
    post:
      tags:
        - Activities
      summary: Creates a new activity for the sport identified by a sport id
      security:
        - token: [ ]
      requestBody:
        description: Activity object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateActivityRequest'
      responses:
        201:
          description: Activity was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateActivityResponse'

        400:
          $ref: '#/components/responses/InvalidRequestBodyResponse'

        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /sports/{id}/activities:
    get:
      tags:
        - Sports
      summary: Gets all activities of a sport
      parameters:
        - name: id
          in: path
          description: Sport id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Activity was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivitiesResponse'
        400:
          description: Invalid sport id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

        404:
          description: Activity was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'


  /activities/{id}:
    get:
      tags:
        - Activities
      summary: Gets an activity by id
      parameters:
        - name: id
          in: path
          description: Activity id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Activity was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        400:
          description: Invalid activity id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Activity was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

    delete:
      tags:
        - Activities
      summary: Deletes an activity by id
      parameters:
        - name: id
          in: path
          description: Activity id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Activity deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        400:
          description: Invalid activity id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Activity was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /activities/search:
    get:
      tags:
        - Activities
      summary: Searches for activities
      parameters:
        - name: sid
          in: query
          description: Sport Id
          required: true
          schema:
            type: integer

        - name: orderBy
          in: query
          description: Order by
          required: true
          schema:
            type: string

        - name: date
          in: query
          description: Activity date
          required: false
          schema:
            type: string

        - name: rid
          in: query
          description: Route id
          required: false
          schema:
            type: integer

        - name: limit
          in: query
          description: Activities limit
          required: false
          schema:
            type: integer


        - name: skip
          in: query
          description: Activities skip
          required: false
          schema:
            type: integer


      responses:
        200:
          description: Activity was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivitiesResponse'
        400:
          description: Invalid query params
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Activity was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

components:
  responses:
    InternalServerErrorResponse:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'

    InvalidRequestBodyResponse:
      description: Invalid request body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'

  schemas:
    UsersResponse:
      type: object
      required:
        - users
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'

    RoutesResponse:
      type: object
      required:
        - routes
      properties:
        routes:
          type: array
          items:
            $ref: '#/components/schemas/Route'

    SportsResponse:
      type: object
      required:
        - sports
      properties:
        sports:
          type: array
          items:
            $ref: '#/components/schemas/Sport'

    ActivitiesResponse:
      type: object
      required:
        - activities
      properties:
        activities:
          type: array
          items:
            $ref: '#/components/schemas/Activity'

    CreateUserResponse:
      type: object
      required:
        - uid
        - token
      properties:
        uid:
          type: integer
          description: User Id
        token:
          type: string
          description: User Token

    CreateRouteResponse:
      type: object
      required:
        - rid
      properties:
        rid:
          type: integer
          description: Route Id

    CreateSportResponse:
      type: object
      required:
        - sid
      properties:
        sid:
          type: integer
          description: Sport Id

    CreateActivityResponse:
      type: object
      required:
        - aid
      properties:
        aid:
          type: integer
          description: Activity Id

    MessageResponse:
      type: object
      required:
        - id
      properties:
        message:
          type: string
          description: Message

    AppError:
      type: object
      description: Application error
      required:
        - code
        - name
        - message
      properties:
        code:
          type: number
          format: integer
          description: Internal error code
          example: 1000
        name:
          type: string
          description: Internal error name
          example: FAIL
        message:
          type: string
          description: Error description message
          example: An error occurred


    CreateRouteRequest:
      type: object
      required:
        - start_location
        - end_location
        - distance
      properties:
        start_location:
          type: string
          description: Route start location

        end_location:
          type: string
          description: Route end location

        distance:
          type: number
          description: Route distance in km
          example: 15.2

    CreateActivityRequest:
      required:
        - date
        - duration
        - sid
      properties:
        date:
          $ref: '#/components/schemas/Date'

        duration:
          $ref: '#/components/schemas/Duration'

        sid:
          type: integer
          description: Sport id

        rid:
          type: integer
          description: Route id

    CreateUserRequest:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          description: User name
          example: André Páscoa
        email:
          type: string
          description: User email
          example: andre@pascoa.org

    CreateSportRequest:
      type: object
      required:
        - name
        - uid
      properties:
        name:
          type: string
          description: Sport name
          example: Powerlifting

        description:
          type: string
          description: Sport Description
          example: andre@pascoa.org

        uid:
          type: integer
          description: User id

    User:
      type: object
      description: User object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: integer
          description: User Id
        name:
          type: string
          description: User name
          example: André Páscoa
        email:
          type: string
          description: User email
          example: andre@pascoa.org

    Sport:
      type: object
      description: Sport object
      required:
        - id
        - name
        - uid
      properties:
        id:
          type: integer
          description: Sport id
        name:
          type: string
          description: Sport name
          example: Powerlifting

        description:
          type: string
          description: Sport Description
          example: andre@pascoa.org

        uid:
          type: integer
          description: User id

    Route:
      type: object
      description: Route object
      required:
        - id
        - start_location
        - end_location
        - distance
        - uid
      properties:
        id:
          type: integer
          description: Route id

        start_location:
          type: string
          description: Route start location
          example: "Porto, Portugal"

        end_location:
          type: string
          description: Route end location
          example: "Lisbon, Portugal"

        distance:
          type: number
          description: Route distance in km
          example: 15.2

        uid:
          type: integer
          description: User id

    Activity:
      type: object
      description: Activity object
      required:
        - id
        - date
        - duration
        - uid
        - sid
      properties:
        id:
          type: integer
          description: Activity id

        date:
          $ref: '#/components/schemas/Date'

        duration:
          $ref: '#/components/schemas/Duration'

        uid:
          type: integer
          description: User id

        sid:
          type: integer
          description: Sport id

        rid:
          type: integer
          description: Route id

    Duration:
      type: string
      description: Duration (HH:MM:SS.FFF)
      pattern: ^(?:[01]\d|2[0123])\:(?:[012345]\d)\:(?:[012345]\d)\.\d{3}$
      example: "01:23:45.678"

    Date:
      type: string
      description: Date (YYYY-MM-DD)
      pattern: ^\d{4}\-(0[1-9]|1[012])\-(0[1-9]|[12][0-9]|3[01])$
      example: "2001-09-26"

  securitySchemes:
    token:
      type: http
      scheme: bearer
